"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.authMiddlewares = exports.commentsMiddlewares = exports.postsMiddlewares = exports.blogValidationMiddlewares = exports.usersMiddlewares = exports.sessionsMiddlewares = exports.globalRequestLimitMiddleware = exports.commentsControllers = exports.blogsControllers = exports.postsControllers = exports.securityControllers = exports.usersControllers = exports.authControllers = exports.testsController = exports.blogsServices = exports.commentsServices = exports.postsServices = exports.authServices = exports.securityDeviceServices = exports.tokenService = exports.superAdminAdapter = exports.usersServices = exports.blogsRepository = exports.blogsQueryRepository = exports.commentsQueryRepository = exports.commentsRepository = exports.postsQueryRepository = exports.postsRepository = exports.userSessionsQueryRepository = exports.userSessionsRepository = exports.usersQueryRepository = exports.usersRepository = exports.mongoDBCollection = void 0;
require("reflect-metadata");
// import { blogsCollection, commentsCollection, devicesCollection, postsCollection, tokensCollection, usersCollection } from '../../db';
const usersRepository_1 = require("../../services/users/UserRpository/usersRepository");
const usersQueryRepository_1 = require("../../services/users/UserRpository/usersQueryRepository");
const userSessionsRepository_1 = require("../../services/usersSessions/UserSessionsRpository/userSessionsRepository");
const userSessionQueryRepository_1 = require("../../services/usersSessions/UserSessionsRpository/userSessionQueryRepository");
const postsRepository_1 = require("../../services/posts/PostRepository/postsRepository");
const postQueryRepository_1 = require("../../services/posts/PostRepository/postQueryRepository");
const commentsRepository_1 = require("../../services/comments/CommentRepository/commentsRepository");
const commentsQueryRepository_1 = require("../../services/comments/CommentRepository/commentsQueryRepository");
const blogQueryRepository_1 = require("../../services/blogs/BlogsRepository/blogQueryRepository");
const blogsRepository_1 = require("../../services/blogs/BlogsRepository/blogsRepository");
const usersServices_1 = require("../../services/users/usersServices");
const securityDeviceService_1 = require("../../services/usersSessions/securityDeviceService");
const authServices_1 = require("../../services/auth/authServices");
const postsServices_1 = require("../../services/posts/postsServices");
const commentsServices_1 = require("../../services/comments/commentsServices");
const blogsServices_1 = require("../../services/blogs/blogsServices");
const authControllers_1 = require("../../services/auth/authControllers");
const testsController_1 = require("../../services/tests/testsController");
const usersControllers_1 = require("../../services/users/usersControllers");
const securityController_1 = require("../../services/usersSessions/securityController");
const postControllers_1 = require("../../services/posts/postControllers");
const blogsController_1 = require("../../services/blogs/blogsController");
const commentsControllers_1 = require("../../services/comments/commentsControllers");
const db_1 = require("../../db");
const createSuperAdminAdapter_1 = require("../infrastructure/createSuperAdminAdapter");
const tokenService_1 = require("../infrastructure/tokenService");
const globalRequestLimitMiddleware_1 = require("../middlewares/globalRequestLimitMiddleware");
const isThereASessionValidation_1 = require("../../services/usersSessions/userSessionsMiddlewares/isThereASessionValidation");
const isThereAUserValidation_1 = require("../../services/users/UserMiddlewares/isThereAUserValidation");
const isThereAPostValidation_1 = require("../../services/posts/PostMiddlewares/isThereAPostValidation");
const isThereACommentValidation_1 = require("../../services/comments/CommentMiddlewares/isThereACommentValidation");
const authGuardMiddleware_1 = require("../../services/auth/AuthMiddlewares/authGuardMiddleware");
const isThereABlogValidation_1 = require("../../services/blogs/BlogsMiddlewares/isThereABlogValidation");
exports.mongoDBCollection = new db_1.MongoDBCollection();
exports.usersRepository = new usersRepository_1.UsersRepository(exports.mongoDBCollection);
exports.usersQueryRepository = new usersQueryRepository_1.UsersQueryRepository(exports.mongoDBCollection);
exports.userSessionsRepository = new userSessionsRepository_1.UserSessionsRepository(exports.mongoDBCollection);
exports.userSessionsQueryRepository = new userSessionQueryRepository_1.UserSessionsQueryRepository(exports.mongoDBCollection);
exports.postsRepository = new postsRepository_1.PostsRepository(exports.mongoDBCollection);
exports.postsQueryRepository = new postQueryRepository_1.PostsQueryRepository(exports.mongoDBCollection);
exports.commentsRepository = new commentsRepository_1.CommentsRepository(exports.mongoDBCollection);
exports.commentsQueryRepository = new commentsQueryRepository_1.CommentsQueryRepository(exports.mongoDBCollection);
exports.blogsQueryRepository = new blogQueryRepository_1.BlogsQueryRepository(exports.mongoDBCollection);
exports.blogsRepository = new blogsRepository_1.BlogsRepository(exports.mongoDBCollection);
exports.usersServices = new usersServices_1.UserService(exports.mongoDBCollection, exports.usersRepository, exports.usersQueryRepository);
exports.superAdminAdapter = new createSuperAdminAdapter_1.SuperAdminAdapter(exports.usersServices);
exports.tokenService = new tokenService_1.TokenService(exports.mongoDBCollection);
exports.securityDeviceServices = new securityDeviceService_1.SecurityDeviceServices(exports.userSessionsRepository, exports.tokenService);
exports.authServices = new authServices_1.AuthServices(exports.mongoDBCollection, exports.usersServices, exports.usersRepository, exports.usersQueryRepository, exports.securityDeviceServices, exports.tokenService);
exports.postsServices = new postsServices_1.PostsServices(exports.blogsQueryRepository, exports.commentsRepository, exports.commentsQueryRepository, exports.postsRepository);
exports.commentsServices = new commentsServices_1.CommentsServices(exports.commentsRepository);
exports.blogsServices = new blogsServices_1.BlogsServices(exports.blogsRepository);
exports.testsController = new testsController_1.TestsController(exports.mongoDBCollection);
exports.authControllers = new authControllers_1.AuthControllers(exports.authServices, exports.usersQueryRepository);
exports.usersControllers = new usersControllers_1.UsersControllers(exports.usersQueryRepository, exports.usersServices, exports.superAdminAdapter);
exports.securityControllers = new securityController_1.SecurityController(exports.securityDeviceServices, exports.userSessionsQueryRepository);
exports.postsControllers = new postControllers_1.PostsControllers(exports.postsQueryRepository, exports.commentsServices, exports.commentsQueryRepository, exports.postsServices);
exports.blogsControllers = new blogsController_1.BlogsControllers(exports.postsQueryRepository, exports.blogsQueryRepository, exports.postsServices, exports.blogsServices);
exports.commentsControllers = new commentsControllers_1.CommentsControllers(exports.commentsServices, exports.commentsQueryRepository);
exports.globalRequestLimitMiddleware = new globalRequestLimitMiddleware_1.GlobalRequestLimitMiddleware(exports.tokenService, exports.mongoDBCollection);
exports.sessionsMiddlewares = new isThereASessionValidation_1.SessionsMiddlewares(exports.userSessionsRepository, exports.tokenService);
exports.usersMiddlewares = new isThereAUserValidation_1.UsersMiddlewares(exports.usersServices);
exports.blogValidationMiddlewares = new isThereABlogValidation_1.BlogValidationMiddlewares(exports.blogsQueryRepository);
exports.postsMiddlewares = new isThereAPostValidation_1.PostsMiddlewares(exports.postsQueryRepository);
exports.commentsMiddlewares = new isThereACommentValidation_1.Ð¡ommentsMiddlewares(exports.postsQueryRepository, exports.commentsRepository);
exports.authMiddlewares = new authGuardMiddleware_1.AuthMiddlewares(exports.authServices, exports.tokenService, exports.securityDeviceServices, exports.usersQueryRepository);
